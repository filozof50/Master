n_args0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
n_args_11  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
A-data-stat2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdin-stat3  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
stdout-stat4  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
model_version5  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg006  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr17  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg008  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg019  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
arg0210  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr311  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
const_arr212  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
ASSERT( BVGT(0x00000002,(n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
))
 );
ASSERT( SBVGT((n_args0[0x00000003] @ (n_args0[0x00000002] @ (n_args0[0x00000001] @ n_args0[0x00000000]
)
)
),0x00000000)
 );
ASSERT( BVGT(0x00000003,(n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
))
 );
ASSERT( ( NOT( SBVGT((n_args_11[0x00000003] @ (n_args_11[0x00000002] @ (n_args_11[0x00000001] @ n_args_11[0x00000000]
)
)
),0x00000000)
)) );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat2[0x0000000B] @ (A-data-stat2[0x0000000A] @ (A-data-stat2[0x00000009] @ A-data-stat2[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(A-data-stat2[0x0000003F] @ (A-data-stat2[0x0000003E] @ (A-data-stat2[0x0000003D] @ (A-data-stat2[0x0000003C] @ (A-data-stat2[0x0000003B] @ (A-data-stat2[0x0000003A] @ (A-data-stat2[0x00000039] @ A-data-stat2[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdin-stat3[0x0000000B] @ (stdin-stat3[0x0000000A] @ (stdin-stat3[0x00000009] @ stdin-stat3[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdin-stat3[0x0000003F] @ (stdin-stat3[0x0000003E] @ (stdin-stat3[0x0000003D] @ (stdin-stat3[0x0000003C] @ (stdin-stat3[0x0000003B] @ (stdin-stat3[0x0000003A] @ (stdin-stat3[0x00000039] @ stdin-stat3[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ( NOT( (0b0000000000000000000000000000000 = (stdout-stat4[0x0000000B] @ (stdout-stat4[0x0000000A] @ (stdout-stat4[0x00000009] @ stdout-stat4[0x00000008]
)
)
)[30:0]
))) );
ASSERT( BVGT(0x0000000000010000,(stdout-stat4[0x0000003F] @ (stdout-stat4[0x0000003E] @ (stdout-stat4[0x0000003D] @ (stdout-stat4[0x0000003C] @ (stdout-stat4[0x0000003B] @ (stdout-stat4[0x0000003A] @ (stdout-stat4[0x00000039] @ stdout-stat4[0x00000038]
)
)
)
)
)
)
))
 );
ASSERT( ((((0x01 = model_version5[0x00000000]
) AND (0x00 = model_version5[0x00000001]
)
) AND (0x00 = model_version5[0x00000002]
)
) AND (0x00 = model_version5[0x00000003]
)
) );
ASSERT( (0x2D = arg006[0x00000000]
) );
ASSERT( (0x2D = arg006[0x00000001]
) );
ASSERT( (0x3D = arg006[0x00000003]
) );
ASSERT( (0x73 = arg006[0x00000002]
) );
ASSERT( ( NOT( (0x00 = arg006[0x00000004]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000005]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000006]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000007]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000008]
))) );
ASSERT( ( NOT( (0x00 = arg006[0x00000009]
))) );
ASSERT( BVGT(0x0000000A,BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000004],32)
)
)
 );
ASSERT( ( NOT( (0x2B = arg006[0x00000004]
))) );
ASSERT( ( NOT( (0x2D = arg006[0x00000004]
))) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( ( NOT( SBVGT((0x000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
[7:0]
),0x00000009)
)) );
ASSERT( (LET let_k_0 = (0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000004],32)
)
[7:0]
),
let_k_1 = BVPLUS(64, 
BVPLUS(64, 
(let_k_0[60:0] @ 0b000
), 
(let_k_0[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000005],32)
)
[7:0]
))
,
let_k_2 = BVPLUS(64, 
BVPLUS(64, 
(let_k_1[60:0] @ 0b000
), 
(let_k_1[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000006],32)
)
[7:0]
))
,
let_k_3 = BVPLUS(64, 
BVPLUS(64, 
(let_k_2[60:0] @ 0b000
), 
(let_k_2[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000007],32)
)
[7:0]
))
,
let_k_4 = BVPLUS(64, 
BVPLUS(64, 
(let_k_3[60:0] @ 0b000
), 
(let_k_3[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000008],32)
)
[7:0]
))
,
let_k_5 = BVPLUS(64, 
BVPLUS(64, 
(let_k_4[60:0] @ 0b000
), 
(let_k_4[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
[7:0]
))
[6:0],
let_k_6 = BVPLUS(64, 
BVPLUS(64, 
(let_k_4[60:0] @ 0b000
), 
(let_k_4[62:0] @ 0b0
))
, 
(0x00000000000000 @ BVPLUS(32, 
0xFFFFFFD0, 
BVSX(arg006[0x00000009],32)
)
[7:0]
))
 IN 
(0x00000001 = IF(SBVGT(BVPLUS(32, 
0x01000000, 
(0b0 @ (let_k_5 @ 0x000000
)
))
,0x01FFFFFF)
)
THEN (0b0000000000000000000000000 @ let_k_5
)
ELSE let_k_6[31:0]
ENDIF
))  );
%----------------------------------------------------
QUERY( FALSE  );
